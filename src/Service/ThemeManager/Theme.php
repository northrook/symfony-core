<?php

namespace Core\Service\ThemeManager;

// receives compiled theme styles as array
// generate CSS string
// save to path
// return as string
use Northrook\Exception\E_Value;
use Northrook\Filesystem\File;
use Northrook\Resource\Path;

/**
 * @internal
 * @author Martin Nielsen <mn@northrook.com>
 */
final readonly class Theme
{
    public string $css;

    public readonly array $root;

    public function __construct( public string $name, array $styles )
    {
        $this->parseRoot( $styles );

        $this->css = $this->compileStylesheet( $styles );
    }

    public function save( string|Path $path ) : void
    {
        $filepath = new Path( $path );
        if ( 'css' !== $filepath->extension ) {
            E_Value::error( 'Invalid file extension {extension} when saving the {theme} stylesheet. It must be a {css} file.', [
                'extension' => $filepath->extension, 'theme' => $this->name.' theme',
            ] );
        }
        File::save( $filepath->path, $this->css );
    }

    private function parseRoot( array &$styles ) : void
    {

        foreach ( $styles as $var => $value ) {
            if ( \str_starts_with( $value, '--' ) ) {
                if ( ! \array_key_exists( $value, $styles ) ) {
                    E_Value::warning(
                        'The variable {var} referenced an unknown variable {value}.',
                        ['var' => $var, 'value' => $value],
                    );
                }
                $value = "var({$value})";
            }

            $styles[$var] = ['declaration' => $var, 'value' => $value];
        }

    }

    private function compileStylesheet( array $styles ) : string
    {
        $generator = $this::class;

        dump( $styles );

        $css = <<<CSS
            /**
            
               Theme: {$this->name}
            
               This Stylesheet is generated by {$generator}.
            
               These are foundational variables and classes.
            
             */
            CSS;

        $root = [];

        $root_pad = \max( \array_map( fn( $v ) => \strlen( $v['declaration'] ), $styles ) );

        foreach ( $styles as $rule ) {

            $declaration = \mb_str_pad( $rule['declaration'], $root_pad );

            $root[] = "{$declaration} : {$rule['value']};";
        }

        $css .= "\n\n:root {\n\t".\implode( "\n\t", $root )."\n}";

        return $css;
    }
}