<?php

declare( strict_types = 1 );

namespace Northrook\Symfony\Configurator;

use Northrook\Logger\Log;
use Northrook\Symfony\Console\Output;
use Symfony\Component\Filesystem\Exception\IOException;
use Symfony\Component\Filesystem\Filesystem;
use function Northrook\normalizePath;


abstract class AutoConfigure
{
    /** @var bool Has this been instantiated anywhere? */
    private static bool $instantiated = false;

    protected readonly Filesystem $file;
    protected readonly string     $projectDir;

    final public function __construct( string $rootDir )
    {
        $this->projectDir = normalizePath( $rootDir );

        $this->file = new Filesystem();

        if ( !AutoConfigure::$instantiated ) {
            AutoConfigure::$instantiated = true;
            if ( PHP_SAPI === 'cli' ) {
                Output::init( 'AutoConfigure: Initialized' );
            }
        }
    }

    final protected function path( string $fromProjectDir ) : string
    {
        return normalizePath( "{$this->projectDir}/{$fromProjectDir}" );
    }

    final protected function removeFile( string $name ) : void
    {
        $path = $this->path( $name );

        if ( !$this->file->exists( $path ) ) {
            return;
        }

        try {
            $this->file->remove( $path );
            Output::info( "AutoConfigure: Removed {$name}." );
        }
        catch ( IOException $e ) {
            $message = "AutoConfigure: Could not remove {$name}. {$e->getMessage()}";
            Log::Error( message : $message, context : [ 'exception' => $e ] );
            Output::error( $message );
        }
    }

    final protected function createFile( string $fromProjectDir, string $config ) : void
    {
        $path = $this->path( $fromProjectDir );

        if ( $this->file->exists( $path ) ) {
            return;
        }

        if ( !\str_starts_with( $config, '<?php' ) ) {
            Output::error( 'AutoConfigure: Could not create ' . $fromProjectDir . ', it is not a valid PHP file.' );
            return;
        }

        $content = \preg_replace(
                pattern     : '#<\?php\s+?(?=\S)#A',
                replacement : "<?php\n\n// Generated by " . $this::class . "\n\n",
                subject     : $config,
        );

        try {
            if ( !\is_string( $content ) ) {
                throw new \UnexpectedValueException(
                        'Autoconfigure encountered an unexpected error preparing the config string.',
                );
            }
            $this->file->dumpFile( $path, $content );
            Output::OK( "AutoConfigure: Generated {$fromProjectDir}." );
        }

        catch
        ( IOException $exception ) {
            $message = "AutoConfigure: Could not generate {$fromProjectDir}. {$exception->getMessage()}";
            Log::Error(
                    message : $message,
                    context : [ 'exception' => $exception, 'path' => $path ],
            );
            Output::error( $message );
        }
    }

}